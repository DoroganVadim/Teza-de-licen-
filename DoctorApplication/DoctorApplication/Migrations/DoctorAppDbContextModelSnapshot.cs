// <auto-generated />
using System;
using DoctorApplication.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorApplication.Migrations
{
    [DbContext(typeof(DoctorAppDbContext))]
    partial class DoctorAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorApplication.Models.DbEntities.Account", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.Property<string>("token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("verified")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("DoctorApplication.Models.DbEntities.Appointment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Doctor")
                        .HasColumnType("int");

                    b.Property<DateTime>("appointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("appointmentTime")
                        .HasColumnType("time");

                    b.Property<bool>("confirmedDoctor")
                        .HasColumnType("bit");

                    b.Property<bool>("confirmedUser")
                        .HasColumnType("bit");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("emailUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("namePacient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surrnamePacient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Doctor");

                    b.ToTable("appointments");
                });

            modelBuilder.Entity("DoctorApplication.Models.DbEntities.Culture", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("cultures");
                });

            modelBuilder.Entity("DoctorApplication.Models.DbEntities.Doctor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("accountid")
                        .HasColumnType("int");

                    b.Property<bool>("activityStatus")
                        .HasColumnType("bit");

                    b.Property<int>("appointmentNum")
                        .HasColumnType("int");

                    b.Property<string>("imageString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surrname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("verified")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("accountid");

                    b.ToTable("doctors");
                });

            modelBuilder.Entity("DoctorApplication.Models.DbEntities.DoctorSpecialitie", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("enabled")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("doctorSpecialities");
                });

            modelBuilder.Entity("DoctorApplication.Models.DbEntities.LogEvent", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("_event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("logEvents");
                });

            modelBuilder.Entity("DoctorApplication.Models.DbEntities.Resource", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("cultureid")
                        .HasColumnType("int");

                    b.Property<string>("key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("cultureid");

                    b.ToTable("resources");
                });

            modelBuilder.Entity("DoctorDoctorSpecialitie", b =>
                {
                    b.Property<int>("doctorsid")
                        .HasColumnType("int");

                    b.Property<int>("specialitiesid")
                        .HasColumnType("int");

                    b.HasKey("doctorsid", "specialitiesid");

                    b.HasIndex("specialitiesid");

                    b.ToTable("DoctorDoctorSpecialitie");
                });

            modelBuilder.Entity("DoctorApplication.Models.DbEntities.Appointment", b =>
                {
                    b.HasOne("DoctorApplication.Models.DbEntities.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("Doctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("DoctorApplication.Models.DbEntities.Doctor", b =>
                {
                    b.HasOne("DoctorApplication.Models.DbEntities.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountid");

                    b.Navigation("account");
                });

            modelBuilder.Entity("DoctorApplication.Models.DbEntities.LogEvent", b =>
                {
                    b.HasOne("DoctorApplication.Models.DbEntities.Account", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("DoctorApplication.Models.DbEntities.Resource", b =>
                {
                    b.HasOne("DoctorApplication.Models.DbEntities.Culture", "culture")
                        .WithMany("resources")
                        .HasForeignKey("cultureid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("culture");
                });

            modelBuilder.Entity("DoctorDoctorSpecialitie", b =>
                {
                    b.HasOne("DoctorApplication.Models.DbEntities.Doctor", null)
                        .WithMany()
                        .HasForeignKey("doctorsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorApplication.Models.DbEntities.DoctorSpecialitie", null)
                        .WithMany()
                        .HasForeignKey("specialitiesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorApplication.Models.DbEntities.Culture", b =>
                {
                    b.Navigation("resources");
                });
#pragma warning restore 612, 618
        }
    }
}
